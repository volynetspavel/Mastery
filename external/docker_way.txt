1. Запуск activemq 
docker run -d -p 61616:61616 -p 8161:8161 --name employee-activemq rmohr/activemq:latest

2. Запуск MySql
docker run -d -p 3306:3306 --name employee-mysql -e MYSQL_ROOT_PASSWORD=root –e MYSQL_DATABASE=employeedb -e MYSQL_USER=mjc_user -e MYSQL_PASSWORD=mjcuser12345 mysql:latest

2.1 Поменять имя локалхост в урл (для БД в запросе добавить пару параметров)
spring.datasource.url = jdbc:mysql://employee-mysql:3306/employeedb?allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Europe/Moscow&useSSL=false
spring.activemq.broker-url=tcp://employee-activemq:61616

3. Создание jar-файла mastery-0.0.1-SNAPSHOT.jar
./mvnw clean package

3. Dockerfile

FROM openjdk:8-jdk-alpine
EXPOSE 8085
COPY target/mastery-0.0.1-SNAPSHOT.jar mastery-0.0.1-SNAPSHOT.jar
ENTRYPOINT ["java","-jar","/mastery-0.0.1-SNAPSHOT.jar"]

4. Создать image приложения
docker build -d -t employee-app-image . 

5. Запуск контейнера приложения
docker run -d -p 8085:8085 --name employee-app-container --link employee-mysql:mysql --link employee-activemq:rmohr/activemq employee-app


	Когда есть docker-compose.yml 
1. Создаем docker-compose.yml и Dockerfile

2. Создание jar-файла mastery-0.0.1-SNAPSHOT.jar
./mvnw clean package

3. Запуск контейнера приложения
docker-compose up --build — If we do an update on the Dockerfile, the war/jar file, or the docker-compose file, then we have to execute this command to get updated data on the Docker machine.
   либо это можно сделать отдельными командами 
#docker-compose build
docker-compose up - This will execute Dockerfile commands and will run services defined in the docker-compose file.
docker-compose down — This will stop and remove all containers that were running by docker-compose file.
